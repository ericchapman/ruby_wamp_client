require 'spec_helper'

# !!!!THIS FILE IS AUTOGENERATED.  DO NOT HAND EDIT!!!!

describe Wamp::Client::Message do

  describe Wamp::Client::Message::Hello do

    it 'creates the message object' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Hello.new(*params)

      expect(object.realm).to eq('string')
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Hello)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [1,'string',{ test: 1 }]
      object = Wamp::Client::Message::Hello.parse(params)

      expect(object.realm).to eq('string')
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Hello)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [1,'string',{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.realm).to eq('string')
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Hello)).to eq(true)
    end

    it 'generates the payload' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Hello.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(1)
      expect(payload[1]).to eq('string')
      expect(payload[2]).to eq({ test: 1 })
    end

  end

  describe Wamp::Client::Message::Welcome do

    it 'creates the message object' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Welcome.new(*params)

      expect(object.session).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Welcome)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [2,123,{ test: 1 }]
      object = Wamp::Client::Message::Welcome.parse(params)

      expect(object.session).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Welcome)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [2,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.session).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Welcome)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Welcome.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(2)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
    end

  end

  describe Wamp::Client::Message::Abort do

    it 'creates the message object' do
      params = [{ test: 1 },'string']
      object = Wamp::Client::Message::Abort.new(*params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Abort)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [3,{ test: 1 },'string']
      object = Wamp::Client::Message::Abort.parse(params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Abort)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [3,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Abort)).to eq(true)
    end

    it 'generates the payload' do
      params = [{ test: 1 },'string']
      object = Wamp::Client::Message::Abort.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(3)
      expect(payload[1]).to eq({ test: 1 })
      expect(payload[2]).to eq('string')
    end

  end

  describe Wamp::Client::Message::Goodbye do

    it 'creates the message object' do
      params = [{ test: 1 },'string']
      object = Wamp::Client::Message::Goodbye.new(*params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Goodbye)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [6,{ test: 1 },'string']
      object = Wamp::Client::Message::Goodbye.parse(params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Goodbye)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [6,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.details).to eq({ test: 1 })
      expect(object.reason).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Goodbye)).to eq(true)
    end

    it 'generates the payload' do
      params = [{ test: 1 },'string']
      object = Wamp::Client::Message::Goodbye.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(6)
      expect(payload[1]).to eq({ test: 1 })
      expect(payload[2]).to eq('string')
    end

  end

  describe Wamp::Client::Message::Error do

    it 'creates the message object' do
      params = [123,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Error.new(*params)

      expect(object.request_type).to eq(123)
      expect(object.request_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.error).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [8,123,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Error.parse(params)

      expect(object.request_type).to eq(123)
      expect(object.request_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.error).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [8,123,123,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.request_type).to eq(123)
      expect(object.request_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.error).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Error.new(*params)
      payload = object.payload

      expect(payload.count).to eq(5)
      expect(payload[0]).to eq(8)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
      expect(payload[3]).to eq({ test: 1 })
      expect(payload[4]).to eq('string')
    end

    describe 'checks optional parameter arguments' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Error.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [8,123,123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Error.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Error.new(*params)
        payload = object.payload

        expect(payload.count).to eq(6)
        expect(payload[0]).to eq(8)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq('string')
        expect(payload[5]).to eq(['test'])
      end

    end

    describe 'checks optional parameter argumentskw' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Error.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [8,123,123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Error.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Error.new(*params)
        payload = object.payload

        expect(payload.count).to eq(7)
        expect(payload[0]).to eq(8)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq('string')
        expect(payload[5]).to eq([])
        expect(payload[6]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Error.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [8,123,123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Error.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Error)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Error.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(8)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq('string')
      end

    end

  end

  describe Wamp::Client::Message::Publish do

    it 'creates the message object' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Publish.new(*params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [16,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Publish.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [16,123,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Publish.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(16)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
      expect(payload[3]).to eq('string')
    end

    describe 'checks optional parameter arguments' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Publish.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [16,123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Publish.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Publish.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(16)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
        expect(payload[4]).to eq(['test'])
      end

    end

    describe 'checks optional parameter argumentskw' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Publish.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [16,123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Publish.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Publish.new(*params)
        payload = object.payload

        expect(payload.count).to eq(6)
        expect(payload[0]).to eq(16)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
        expect(payload[4]).to eq([])
        expect(payload[5]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Publish.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [16,123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Publish.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Publish)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Publish.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(16)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
      end

    end

  end

  describe Wamp::Client::Message::Published do

    it 'creates the message object' do
      params = [123,123]
      object = Wamp::Client::Message::Published.new(*params)

      expect(object.publish_request).to eq(123)
      expect(object.publication).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Published)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [17,123,123]
      object = Wamp::Client::Message::Published.parse(params)

      expect(object.publish_request).to eq(123)
      expect(object.publication).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Published)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [17,123,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.publish_request).to eq(123)
      expect(object.publication).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Published)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123]
      object = Wamp::Client::Message::Published.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(17)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Subscribe do

    it 'creates the message object' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Subscribe.new(*params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Subscribe)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [32,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Subscribe.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Subscribe)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [32,123,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.topic).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Subscribe)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Subscribe.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(32)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
      expect(payload[3]).to eq('string')
    end

  end

  describe Wamp::Client::Message::Subscribed do

    it 'creates the message object' do
      params = [123,123]
      object = Wamp::Client::Message::Subscribed.new(*params)

      expect(object.subscribe_request).to eq(123)
      expect(object.subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Subscribed)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [33,123,123]
      object = Wamp::Client::Message::Subscribed.parse(params)

      expect(object.subscribe_request).to eq(123)
      expect(object.subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Subscribed)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [33,123,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.subscribe_request).to eq(123)
      expect(object.subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Subscribed)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123]
      object = Wamp::Client::Message::Subscribed.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(33)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Unsubscribe do

    it 'creates the message object' do
      params = [123,123]
      object = Wamp::Client::Message::Unsubscribe.new(*params)

      expect(object.request).to eq(123)
      expect(object.subscribed_subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribe)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [34,123,123]
      object = Wamp::Client::Message::Unsubscribe.parse(params)

      expect(object.request).to eq(123)
      expect(object.subscribed_subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribe)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [34,123,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.subscribed_subscription).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribe)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123]
      object = Wamp::Client::Message::Unsubscribe.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(34)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Unsubscribed do

    it 'creates the message object' do
      params = [123]
      object = Wamp::Client::Message::Unsubscribed.new(*params)

      expect(object.unsubscribe_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribed)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [35,123]
      object = Wamp::Client::Message::Unsubscribed.parse(params)

      expect(object.unsubscribe_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribed)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [35,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.unsubscribe_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unsubscribed)).to eq(true)
    end

    it 'generates the payload' do
      params = [123]
      object = Wamp::Client::Message::Unsubscribed.new(*params)
      payload = object.payload

      expect(payload.count).to eq(2)
      expect(payload[0]).to eq(35)
      expect(payload[1]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Event do

    it 'creates the message object' do
      params = [123,123,{ test: 1 }]
      object = Wamp::Client::Message::Event.new(*params)

      expect(object.subscribed_subscription).to eq(123)
      expect(object.published_publication).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [36,123,123,{ test: 1 }]
      object = Wamp::Client::Message::Event.parse(params)

      expect(object.subscribed_subscription).to eq(123)
      expect(object.published_publication).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [36,123,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.subscribed_subscription).to eq(123)
      expect(object.published_publication).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123,{ test: 1 }]
      object = Wamp::Client::Message::Event.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(36)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
      expect(payload[3]).to eq({ test: 1 })
    end

    describe 'checks optional parameter publish_arguments' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Event.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [36,123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Event.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Event.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(36)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq(['test'])
      end

    end

    describe 'checks optional parameter publish_argumentskw' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Event.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [36,123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Event.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Event.new(*params)
        payload = object.payload

        expect(payload.count).to eq(6)
        expect(payload[0]).to eq(36)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq([])
        expect(payload[5]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Event.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [36,123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Event.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Event)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Event.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(36)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
      end

    end

  end

  describe Wamp::Client::Message::Call do

    it 'creates the message object' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Call.new(*params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [48,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Call.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [48,123,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Call.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(48)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
      expect(payload[3]).to eq('string')
    end

    describe 'checks optional parameter arguments' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Call.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [48,123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Call.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',['test']]
        object = Wamp::Client::Message::Call.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(48)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
        expect(payload[4]).to eq(['test'])
      end

    end

    describe 'checks optional parameter argumentskw' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Call.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [48,123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Call.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',[],{ test: 1 }]
        object = Wamp::Client::Message::Call.new(*params)
        payload = object.payload

        expect(payload.count).to eq(6)
        expect(payload[0]).to eq(48)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
        expect(payload[4]).to eq([])
        expect(payload[5]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Call.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [48,123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Call.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Call)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },'string',[],{}]
        object = Wamp::Client::Message::Call.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(48)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq('string')
      end

    end

  end

  describe Wamp::Client::Message::Result do

    it 'creates the message object' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Result.new(*params)

      expect(object.call_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [50,123,{ test: 1 }]
      object = Wamp::Client::Message::Result.parse(params)

      expect(object.call_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [50,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.call_request).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Result.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(50)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
    end

    describe 'checks optional parameter yield_arguments' do

      it 'creates the message object' do
        params = [123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Result.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [50,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Result.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Result.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(50)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq(['test'])
      end

    end

    describe 'checks optional parameter yield_argumentskw' do

      it 'creates the message object' do
        params = [123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Result.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [50,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Result.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Result.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(50)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq([])
        expect(payload[4]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Result.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [50,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Result.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Result)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Result.new(*params)
        payload = object.payload

        expect(payload.count).to eq(3)
        expect(payload[0]).to eq(50)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
      end

    end

  end

  describe Wamp::Client::Message::Register do

    it 'creates the message object' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Register.new(*params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Register)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [64,123,{ test: 1 },'string']
      object = Wamp::Client::Message::Register.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Register)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [64,123,{ test: 1 },'string']
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.procedure).to eq('string')
      expect(object.is_a?(Wamp::Client::Message::Register)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 },'string']
      object = Wamp::Client::Message::Register.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(64)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
      expect(payload[3]).to eq('string')
    end

  end

  describe Wamp::Client::Message::Registered do

    it 'creates the message object' do
      params = [123,123]
      object = Wamp::Client::Message::Registered.new(*params)

      expect(object.register_request).to eq(123)
      expect(object.registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Registered)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [65,123,123]
      object = Wamp::Client::Message::Registered.parse(params)

      expect(object.register_request).to eq(123)
      expect(object.registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Registered)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [65,123,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.register_request).to eq(123)
      expect(object.registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Registered)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123]
      object = Wamp::Client::Message::Registered.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(65)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Unregister do

    it 'creates the message object' do
      params = [123,123]
      object = Wamp::Client::Message::Unregister.new(*params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregister)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [66,123,123]
      object = Wamp::Client::Message::Unregister.parse(params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregister)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [66,123,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregister)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123]
      object = Wamp::Client::Message::Unregister.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(66)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Unregistered do

    it 'creates the message object' do
      params = [123]
      object = Wamp::Client::Message::Unregistered.new(*params)

      expect(object.unregister_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregistered)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [67,123]
      object = Wamp::Client::Message::Unregistered.parse(params)

      expect(object.unregister_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregistered)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [67,123]
      object = Wamp::Client::Message.parse(params)

      expect(object.unregister_request).to eq(123)
      expect(object.is_a?(Wamp::Client::Message::Unregistered)).to eq(true)
    end

    it 'generates the payload' do
      params = [123]
      object = Wamp::Client::Message::Unregistered.new(*params)
      payload = object.payload

      expect(payload.count).to eq(2)
      expect(payload[0]).to eq(67)
      expect(payload[1]).to eq(123)
    end

  end

  describe Wamp::Client::Message::Invocation do

    it 'creates the message object' do
      params = [123,123,{ test: 1 }]
      object = Wamp::Client::Message::Invocation.new(*params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [68,123,123,{ test: 1 }]
      object = Wamp::Client::Message::Invocation.parse(params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [68,123,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.request).to eq(123)
      expect(object.registered_registration).to eq(123)
      expect(object.details).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,123,{ test: 1 }]
      object = Wamp::Client::Message::Invocation.new(*params)
      payload = object.payload

      expect(payload.count).to eq(4)
      expect(payload[0]).to eq(68)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq(123)
      expect(payload[3]).to eq({ test: 1 })
    end

    describe 'checks optional parameter call_arguments' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Invocation.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [68,123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Invocation.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Invocation.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(68)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq(['test'])
      end

    end

    describe 'checks optional parameter call_argumentskw' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Invocation.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [68,123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Invocation.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Invocation.new(*params)
        payload = object.payload

        expect(payload.count).to eq(6)
        expect(payload[0]).to eq(68)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
        expect(payload[4]).to eq([])
        expect(payload[5]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Invocation.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [68,123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Invocation.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Invocation)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Invocation.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(68)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq(123)
        expect(payload[3]).to eq({ test: 1 })
      end

    end

  end

  describe Wamp::Client::Message::Yield do

    it 'creates the message object' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Yield.new(*params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [70,123,{ test: 1 }]
      object = Wamp::Client::Message::Yield.parse(params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [70,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Yield.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(70)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
    end

    describe 'checks optional parameter arguments' do

      it 'creates the message object' do
        params = [123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Yield.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [70,123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Yield.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },['test']]
        object = Wamp::Client::Message::Yield.new(*params)
        payload = object.payload

        expect(payload.count).to eq(4)
        expect(payload[0]).to eq(70)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq(['test'])
      end

    end

    describe 'checks optional parameter argumentskw' do

      it 'creates the message object' do
        params = [123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Yield.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [70,123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Yield.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },[],{ test: 1 }]
        object = Wamp::Client::Message::Yield.new(*params)
        payload = object.payload

        expect(payload.count).to eq(5)
        expect(payload[0]).to eq(70)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
        expect(payload[3]).to eq([])
        expect(payload[4]).to eq({ test: 1 })
      end

    end

    describe 'checks optional parameters' do

      it 'creates the message object' do
        params = [123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Yield.new(*params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'parses the message and creates an object' do
        params = [70,123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Yield.parse(params)

        expect(object.is_a?(Wamp::Client::Message::Yield)).to eq(true)
      end

      it 'generates the payload' do
        params = [123,{ test: 1 },[],{}]
        object = Wamp::Client::Message::Yield.new(*params)
        payload = object.payload

        expect(payload.count).to eq(3)
        expect(payload[0]).to eq(70)
        expect(payload[1]).to eq(123)
        expect(payload[2]).to eq({ test: 1 })
      end

    end

  end

  describe Wamp::Client::Message::Challenge do

    it 'creates the message object' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Challenge.new(*params)

      expect(object.authmethod).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Challenge)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [4,'string',{ test: 1 }]
      object = Wamp::Client::Message::Challenge.parse(params)

      expect(object.authmethod).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Challenge)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [4,'string',{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.authmethod).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Challenge)).to eq(true)
    end

    it 'generates the payload' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Challenge.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(4)
      expect(payload[1]).to eq('string')
      expect(payload[2]).to eq({ test: 1 })
    end

  end

  describe Wamp::Client::Message::Authenticate do

    it 'creates the message object' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Authenticate.new(*params)

      expect(object.signature).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Authenticate)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [5,'string',{ test: 1 }]
      object = Wamp::Client::Message::Authenticate.parse(params)

      expect(object.signature).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Authenticate)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [5,'string',{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.signature).to eq('string')
      expect(object.extra).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Authenticate)).to eq(true)
    end

    it 'generates the payload' do
      params = ['string',{ test: 1 }]
      object = Wamp::Client::Message::Authenticate.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(5)
      expect(payload[1]).to eq('string')
      expect(payload[2]).to eq({ test: 1 })
    end

  end

  describe Wamp::Client::Message::Cancel do

    it 'creates the message object' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Cancel.new(*params)

      expect(object.call_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Cancel)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [49,123,{ test: 1 }]
      object = Wamp::Client::Message::Cancel.parse(params)

      expect(object.call_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Cancel)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [49,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.call_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Cancel)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Cancel.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(49)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
    end

  end

  describe Wamp::Client::Message::Interrupt do

    it 'creates the message object' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Interrupt.new(*params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Interrupt)).to eq(true)
    end

    it 'parses the message and creates an object' do
      params = [69,123,{ test: 1 }]
      object = Wamp::Client::Message::Interrupt.parse(params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Interrupt)).to eq(true)
    end

    it 'globally parses the message and creates an object' do
      params = [69,123,{ test: 1 }]
      object = Wamp::Client::Message.parse(params)

      expect(object.invocation_request).to eq(123)
      expect(object.options).to eq({ test: 1 })
      expect(object.is_a?(Wamp::Client::Message::Interrupt)).to eq(true)
    end

    it 'generates the payload' do
      params = [123,{ test: 1 }]
      object = Wamp::Client::Message::Interrupt.new(*params)
      payload = object.payload

      expect(payload.count).to eq(3)
      expect(payload[0]).to eq(69)
      expect(payload[1]).to eq(123)
      expect(payload[2]).to eq({ test: 1 })
    end

  end

end
